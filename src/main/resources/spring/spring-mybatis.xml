<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">
	<!-- 配置数据源 ，使用阿里巴巴的druid数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性driverClassName、 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${user.jdbc.url}" />
		<property name="username" value="${user.jdbc.username}" />
		<property name="password" value="${user.jdbc.password}" />

		<!--<property name="url" value="${user.jdbc.url}" />-->
		<!--<property name="username" value="${user.jdbc.username}" />-->
		<!--<property name="password" value="${user.jdbc.password}" />-->

		<!-- 配置初始化大小、最小、最大 -->
		<!-- 通常来说，只需要修改initialSize、minIdle、maxActive -->
		<property name="initialSize" value="20" />
		<property name="minIdle" value="20" />
		<property name="maxActive" value="200" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="3000" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
				  value="20" />

		<!-- 监控数据库 -->
		<property name="filters" value="mergeStat" />
	</bean>

	<!--&lt;!&ndash; myBatis文件 &ndash;&gt;-->
	<!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
		<!--&lt;!&ndash; 引用数据源 &ndash;&gt;-->
		<!--<property name="dataSource" ref="dataSource" />-->
		<!--&lt;!&ndash; 自动扫描Mybatis的实体操作的xml文件 &ndash;&gt;-->
		<!--&lt;!&ndash;<property name="mapperLocations" value="classpath:com/dreyer/core/user/*.xml" />&ndash;&gt;-->
		<!--&lt;!&ndash;<property name="mapperLocations" value="classpath*:UserMapper.xml" />&ndash;&gt;-->

		<!--<property name="typeAliasesPackage" value="com.dreyer.facade.user.entity" />-->
		<!--<property name="mapperLocations"-->
				  <!--value="classpath*:UserMapper.xml" />-->

	<!--</bean>-->
	<!--&lt;!&ndash; 配置Mybatis的mapper文件目录 &ndash;&gt;-->
	<!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
		<!--<property name="basePackage" value="com.dreyer.core.user.dao" />-->
		<!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />-->
	<!--</bean>-->

	<!-- 将数据源映射到sqlSessionFactory中 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- <property name="configLocation" value="classpath:mybatis/mybatis-config.xml" /> -->
		<property name="dataSource" ref="dataSource" />

		<property name="typeAliasesPackage" value="com.dreyer.facade.user.entity" />
		<!--<property name="mapperLocations" value="classpath*:com/dreyer/core/user/dao/*.xml" />-->
		<!--<property name="mapperLocations" value="classpath*:com.dreyer.core.use.dao.UserMapper.xml" />-->
		<!--<property name="mapperLocations" value="classpath*:UserMapper.xml" />-->
		<property name="mapperLocations"
				  value="classpath*:com.dreyer.core.user.dao" />
	</bean>

	<!-- MyBatis的Mapper扫描 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.dreyer.core.user.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>


	<!--======= 事务配置 Begin ================= -->
	<!-- 事务管理器（由Spring管理MyBatis的事务） -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 关联数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 注解事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!--======= 事务配置 End =================== -->


</beans>